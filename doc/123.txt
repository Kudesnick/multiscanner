22.03.2017 - [5ч] Создание проекта, подключение библиотек
23.03.2017 - [2ч] Настройка проекта до состояния первичной компилляции
24.03.2017 - [4ч] Изучение структуры папок и внедрение HAL, разработка структуры программы
25.03.2017 - [8ч] Настройка драйверов UART и CAN. Успешно протестировал UART.
26.03.2017 - [2ч] Настроил драйвер CAN. Почему-то нет сигнала на выходе драйвера, пока проблема не решена.
01.04.2017 - [6ч] Выделил CAN в отделный драйвер, создал файл основных настроек, начал прорабатывать интерфейс консоли
02.04.2017 - [8ч] Исправил синтаксические ошибки в модулях настроек, корректно настроил тактовый генератор,
                  обнаружил баг в драйвере CAN SMSIS

1. Интерфейсы CAN и LIN/UART должны работать в режиме моста (ретрансляции сообщений). Т.е. при установке устройства "в разрыв". Должна быть возможность "прозрачной" передачи пакетов.

Консольные команды:
test [CAN1|CAN2|LIN1|LIN2|UART1|UART2|CON] - вывод информации о доступных интерфейсах либо детальная информация по конкретному интерфейсу
Ответ:
    CAN1 <enable|disable|not available>
        baudrates range [range]
        prop seg range [range]
        phase seg1 range [range]
        phase seg2 range [range]
        sjw range [range]
        fd <enable|disable|not supported>

    CAN2 <enable|disable|not available>
        baudrates range [range]
        prop seg range [range]
        phase seg1 range [range]
        phase seg2 range [range]
        sjw range [range]
        fd <enable|disable|not supported>

    LIN1 <enable|disable|not available>
        baudrates range [range]
        break detect length [10 - 11]

    LIN2 <enable|disable|not available>
        baudrates range [range]
        break detect length [10 - 11]

    UART1 <enable|disable|not available>
        baudrates range [range]
        byte length range [8 - 9]
        stop bits [0.5, 1, 1.5, 2]
        parity [even, odd, mark, space, none]

    UART2 <enable|disable|not available>
        baudrates range [range]
        byte length range [8 - 9]
        stop bits [0.5, 1, 1.5, 2]
        parity [even, odd, mark, space, none]

    CON
        baudrates range [range]
        byte length range [8 - 9]
        stop bits [0.5, 1, 1.5, 2]
        parity [even, odd, mark, space, none]

    set_param [CAN1|CAN2|LIN1|LIN2|UART1|UART2|CON]
        -[e|d] {can/lin/uart only}
        -b <baudrate>
        -ps <prop seg> {can only}
        -p1 <phase seg1> {can only}
        -p2 <phase seg2> {can only}
        -sgw <sjw range> {can only}
        -s <stop bits> {uart only}
        -[even|odd|mark|space|none] {uart only}
        -brk <10|11> {lin only}

send <CAN1|CAN2|LIN1|LIN2|UART1|UART2>
    -id<uint32_t>
        [a] {a - automatic parity (only for lin)}
        [s] {standard (only for can) default for id <= 1FF}
        [ex] {extended (only for can)}
    -l <uint8_t> {depends of interface}
    -d <uint8_t[]> {AABBCCDDEEFF format}
    -chs <uint8|std|ext> {only for lin: fixed, data standart or extended checksum}
    [-r <uint8_t>] {auto retransmit uint8_t times (0 - infinity)}

get_err <uint32_t> // Возвращает расшифровку ошибки, полученной в ответ на какое-либо действие

Формат возвращаемого сообщения:
[Rx|Tx]                             - Направление (прием.передача)
<timestamp>                         - Метка времени фиксации сообщения
<CAN1|CAN2|LIN1|LIN2|UART1|UART2>   - Интерфейс
<id> [s|ex]                         - Id сообщения {стандартное/расширенное (только для can)}
<length> [fd]                       - Длина сообщения {fd - faster data transfers mode (только для can)}
<data[]>                            - "Сырые данные"
[<chs> <uint8_t> [s|ex]]            - {только для lin. s/ex - стандартная/расширенная контрольная сумма}
[<err> <uint32_t>]                  - Код ошибки или предупреждающего сообщения. Расшифровывается в get_err
